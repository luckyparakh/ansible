-
  name: Install Tomcat
  hosts: target
  vars:
    req_java_ver_rh: "java-1.8.0-openjdk"
    req_java_ver_deb: "openjdk-8-jre"
    req_tomcat_ver: "9.0.65"
    tomcat_port: 8090
    tomcat_url_unsecure: "http://dlcdn.apache.org/tomcat/tomcat-{{ req_tomcat_ver.split('.')[0] }}/v{{ req_tomcat_ver }}/bin/apache-tomcat-{{ req_tomcat_ver }}.tar.gz"
    tomcat_url: "https://dlcdn.apache.org/tomcat/tomcat-{{ req_tomcat_ver.split('.')[0] }}/v{{ req_tomcat_ver }}/bin/apache-tomcat-{{ req_tomcat_ver }}.tar.gz"
  tasks:
    - block:
      -
        name: Update Repo
        ansible.builtin.yum:
          update_cache: true
          state: latest
      -
        name: Install Java
        ansible.builtin.yum:
          state: present
          name:
            - "{{ req_java_ver_rh }}"
        register: java_out
      -
        name: Verify Java
        ansible.builtin.command: "java -version"
        when: java_out.changed==true
      -
        name: Downlaod Tomcat
        ansible.builtin.get_url:
          # using unsercure url because getting 'ï¼œurlopen error [SSL: CERTIFICATE_VERIFY_FAILED]' with secured
          url: "{{ tomcat_url_unsecure }}"
          dest: /usr/local
      when: ansible_os_family=="RedHat"
    - block:
      -
        name: Update Repo
        ansible.builtin.apt: 
          update_cache: true
          state: latest
      -
        name: Install Java
        ansible.builtin.apt:
          state: present
          name:
            - "{{ req_java_ver_deb }}"
        register: java_out
      -
        name: Verify Java
        ansible.builtin.command: "java -version"
        when: java_out.changed==true
      -
        name: Downlaod Tomcat
        ansible.builtin.get_url:
          url: "{{ tomcat_url }}"
          dest: /usr/local
      when: ansible_os_family=="Debian"
    -
      name: Verify Download
      ansible.builtin.shell: "ls /usr/local | grep -i tomcat"
    -
      name: Extract Tomcat
      ansible.builtin.unarchive:
        src: "/usr/local/apache-tomcat-{{ req_tomcat_ver }}.tar.gz"
        dest: "/usr/local"
        remote_src: true
    -
      name: Delete /usr/local/latest/
      ansible.builtin.file:
        path: /usr/local/latest/
        state: absent
    -
      name: Rename Tomcat Folder
      ansible.builtin.command: "mv --force /usr/local/apache-tomcat-{{ req_tomcat_ver }} /usr/local/latest"
    -
      name: Replace server.xml
      ansible.builtin.template:
        src: ./24server.xml.j2
        dest: /usr/local/latest/conf/server.xml
    -
      name: Start Tomcat
      # This command will start tomcat but it will stop as ansible exits from target
      # ansible.builtin.command: "nohup /usr/local/latest/bin/startup.sh &"
      # nohup with '&' will make tomcat to run in bg even ansible exits target node
      # prefixing a command with nohup (no hangup) prevents the command from being aborted automatically when you log out or exit the shell.
      ansible.builtin.command: "nohup /usr/local/latest/bin/startup.sh &"
    -
      name: Verify port change
      ansible.builtin.command: "grep 8090 /usr/local/latest/conf/server.xml"
      register: out
    -
      name: Print port change
      ansible.builtin.debug:
        var: out.stdout_lines